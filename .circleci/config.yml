# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
   # Exercise - Rollback
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
# Sequential workflow
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
  configure_infrastructure: 
    docker:
      - image: python:3.9.16-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["43:25:df:fd:19:15:5c:89:b5:d3:82:54:99:c6:2e:69"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment  
# Invoke jobs via workflows
  # Exercise: Smoke Testing
#  smoke_test:
#    docker:
#      - image: alpine:latest
#    steps:
#      - run: apk add --update curl
#      - run:
#          name: smoke test
#          command: |
#            URL="https://blog.udacity.com/"
#            # Test if website exists
#            if curl -s --head ${URL} 
#            then
#              return 0
#            else
#              return 1
#            fi

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  smoke_test-workflow:
    jobs:
      - create_infrastructure
      #- configure_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure
